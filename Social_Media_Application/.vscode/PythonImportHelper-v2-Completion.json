[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.sql.expression",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Follow",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database",
        "description": "database",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "schemas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schemas",
        "description": "schemas",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "map_post_to_response",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "map_posts_to_response",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "oauth2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "oauth2",
        "description": "oauth2",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "models,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models.",
        "description": "models.",
        "detail": "models.",
        "documentation": {}
    },
    {
        "label": "routers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "routers",
        "description": "routers",
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "post",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "like",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.ext.declarative",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "RealDictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy.sql.sqltypes",
        "description": "sqlalchemy.sql.sqltypes",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.sqltypes",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "conint",
        "importPath": "pydantic.types",
        "description": "pydantic.types",
        "isExtraImport": true,
        "detail": "pydantic.types",
        "documentation": {}
    },
    {
        "label": "schemas,models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schemas.models",
        "description": "schemas.models",
        "detail": "schemas.models",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "email.message",
        "description": "email.message",
        "isExtraImport": true,
        "detail": "email.message",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.11a0ae374ac1_add_follows_table",
        "description": "alembic.versions.11a0ae374ac1_add_follows_table",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('follows',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('follower_id', sa.Integer(), nullable=False),\n    sa.Column('followee_id', sa.Integer(), nullable=False),\n    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),\n    sa.ForeignKeyConstraint(['followee_id'], ['users.id'], ondelete='CASCADE'),\n    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], ondelete='CASCADE'),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "alembic.versions.11a0ae374ac1_add_follows_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.11a0ae374ac1_add_follows_table",
        "description": "alembic.versions.11a0ae374ac1_add_follows_table",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('follows')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.11a0ae374ac1_add_follows_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.3ba2927aa84b_likes_and_postable_autogernerated",
        "description": "alembic.versions.3ba2927aa84b_likes_and_postable_autogernerated",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('email', sa.String(), nullable=False),\n    sa.Column('password', sa.String(), nullable=False),\n    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('email')\n    )",
        "detail": "alembic.versions.3ba2927aa84b_likes_and_postable_autogernerated",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.3ba2927aa84b_likes_and_postable_autogernerated",
        "description": "alembic.versions.3ba2927aa84b_likes_and_postable_autogernerated",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(None, 'posts', type_='foreignkey')\n    op.drop_column('posts', 'owner_id')\n    op.drop_column('posts', 'created_at')\n    op.drop_column('posts', 'published')\n    op.drop_table('likes')\n    op.drop_table('users')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.3ba2927aa84b_likes_and_postable_autogernerated",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.55e92b5c0263_add_content_coloumn_to_post_table",
        "description": "alembic.versions.55e92b5c0263_add_content_coloumn_to_post_table",
        "peekOfCode": "def upgrade():\n    op.add_column('posts',sa.Column('content',sa.String(),nullable=False))\n    pass\ndef downgrade():\n    op.drop_column('posts','content')",
        "detail": "alembic.versions.55e92b5c0263_add_content_coloumn_to_post_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.55e92b5c0263_add_content_coloumn_to_post_table",
        "description": "alembic.versions.55e92b5c0263_add_content_coloumn_to_post_table",
        "peekOfCode": "def downgrade():\n    op.drop_column('posts','content')",
        "detail": "alembic.versions.55e92b5c0263_add_content_coloumn_to_post_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.85e9e002a428_add_token_adn_token_expiry_cooums_to_",
        "description": "alembic.versions.85e9e002a428_add_token_adn_token_expiry_cooums_to_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users', sa.Column('reset_token', sa.String(), nullable=True))\n    op.add_column('users', sa.Column('reset_token_expiry', sa.DateTime(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'reset_token_expiry')\n    op.drop_column('users', 'reset_token')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.85e9e002a428_add_token_adn_token_expiry_cooums_to_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.85e9e002a428_add_token_adn_token_expiry_cooums_to_",
        "description": "alembic.versions.85e9e002a428_add_token_adn_token_expiry_cooums_to_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'reset_token_expiry')\n    op.drop_column('users', 'reset_token')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.85e9e002a428_add_token_adn_token_expiry_cooums_to_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.c33be46fa9b9_create_post_table",
        "description": "alembic.versions.c33be46fa9b9_create_post_table",
        "peekOfCode": "def upgrade():\n    op.create_table('posts',sa.Column('id',sa.Integer(),nullable=False,primary_key=True),sa.Column('title',sa.String(),nullable=False))\ndef downgrade():\n    op.drop_table('posts')\n    pass",
        "detail": "alembic.versions.c33be46fa9b9_create_post_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.c33be46fa9b9_create_post_table",
        "description": "alembic.versions.c33be46fa9b9_create_post_table",
        "peekOfCode": "def downgrade():\n    op.drop_table('posts')\n    pass",
        "detail": "alembic.versions.c33be46fa9b9_create_post_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\",f'postgresql+psycopg2://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}') \n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "def login(user_credentials : OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(models.User.email == user_credentials.username).first()     #in request form there 1sr attribute is username which may be suername or email\n    if not user:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail = f\"Invalid Credentials\")\n    #here the 1st password is from requestside and the 2nd is form db which was stored in hashed formate\n    if not utils.verify(user_credentials.password, user.password):  \n                    raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail = f\"Invalid Credentials\")\n    # crate a token\n    # return a JWt token\n    access_token = oauth2.create_access_token(data = {\"user_id\":user.id})",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "def logout(\ntoken: str = Depends(oauth2.oauth2_scheme)  # Extract token\n):\n    # **ADD TOKEN TO BLACKLIST**\n    oauth2.TOKEN_BLACKLIST.add(token)\n    return {\"message\": \"Successfully logged out\"}",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "router = APIRouter(tags=['Authentication'])\n# # def login(user_credentials : schemas.UserLogin, db: Session = Depends(database.get_db)):   #i will use if inot use authentication request form\n# #     user = db.query(models.User).filter(models.User.email == user_credentials.email).first()\n@router.post(\"/login\", response_model=schemas.Token)\ndef login(user_credentials : OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(models.User.email == user_credentials.username).first()     #in request form there 1sr attribute is username which may be suername or email\n    if not user:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail = f\"Invalid Credentials\")\n    #here the 1st password is from requestside and the 2nd is form db which was stored in hashed formate\n    if not utils.verify(user_credentials.password, user.password):  ",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "like",
        "kind": 2,
        "importPath": "routers.like",
        "description": "routers.like",
        "peekOfCode": "def like(like: schemas.CreateLike, db: Session = Depends(database.get_db), current_user: int = Depends(oauth2.get_current_user)):\n    like_query = db.query(models.Like).filter(models.Like.post_id == like.post_id, models.Like.user_id == current_user.id)      #as in our schema we ar enot prviding user_id but we are going to take the user id form toke so why we using here current_user alot\n    found_like = like_query.first()\n    if(like.dir == 1):\n        if found_like:\n            raise HTTPException(status_code=status.HTTP_409_CONFLICT,detail=f\"user{current_user.id} has already liked the post {like.post_id} before this \")\n        new_like = models.Like(post_id = like.post_id,user_id = current_user.id)\n        db.add(new_like)\n        db.commit()\n        return {\"message\": \"successfully like dthe post\"}",
        "detail": "routers.like",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.like",
        "description": "routers.like",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/like\",\n    tags=['Like']\n)\n@router.post(\"/\",status_code=status.HTTP_201_CREATED)       #as here is only / but it is actuall /like because like is prefix here \ndef like(like: schemas.CreateLike, db: Session = Depends(database.get_db), current_user: int = Depends(oauth2.get_current_user)):\n    like_query = db.query(models.Like).filter(models.Like.post_id == like.post_id, models.Like.user_id == current_user.id)      #as in our schema we ar enot prviding user_id but we are going to take the user id form toke so why we using here current_user alot\n    found_like = like_query.first()\n    if(like.dir == 1):\n        if found_like:",
        "detail": "routers.like",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "routers.post",
        "description": "routers.post",
        "peekOfCode": "def get_post(id: int, db: Session = Depends(get_db)):\n    post_with_likes = (\n        db.query(models.Post, func.count(models.Like.post_id).label(\"likes\"))\n        .join(models.Like, models.Like.post_id == models.Post.id, isouter=True)\n        .filter(models.Post.id == id)\n        .group_by(models.Post.id)\n        .first()\n    )\n    if not post_with_likes:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,",
        "detail": "routers.post",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.post",
        "description": "routers.post",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/posts\",\n    tags=['Posts']\n)\n# Directory for storing images\nUPLOAD_FOLDER = \"static/images\"\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\n# getting all data from database\n@router.get(\"/\", response_model=List[schemas.PostWithLike])\nasync def get_posts(db: Session = Depends(get_db)):",
        "detail": "routers.post",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "routers.post",
        "description": "routers.post",
        "peekOfCode": "UPLOAD_FOLDER = \"static/images\"\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\n# getting all data from database\n@router.get(\"/\", response_model=List[schemas.PostWithLike])\nasync def get_posts(db: Session = Depends(get_db)):\n    # Query to get posts and the number of likes\n    posts_with_likes = (\n        db.query(models.Post, func.count(models.Like.post_id).label(\"likes\"))\n        .join(models.Like, models.Like.post_id == models.Post.id, isouter=True)\n        .group_by(models.Post.id)",
        "detail": "routers.post",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "def create_user(user: schemas.CreateUser, db:Session = Depends(get_db)): \n    # hash the password - user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = models.User(**user.dict())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return new_user\n# Follow a user",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "follow_user",
        "kind": 2,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "def follow_user(request: schemas.FollowRequest, db: Session = Depends(get_db), current_user: models.User = Depends(oauth2.get_current_user)):\n    if current_user.id == request.followee_id:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"You cannot follow yourself\")\n    # Check if already following\n    existing_follow = db.query(Follow).filter(\n        Follow.follower_id == current_user.id,\n        Follow.followee_id == request.followee_id\n    ).first()\n    if existing_follow:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"You are already following this user\")",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "unfollow_user",
        "kind": 2,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "def unfollow_user(followee_id: int, db: Session = Depends(get_db), current_user: models.User = Depends(oauth2.get_current_user)):\n    follow = db.query(Follow).filter(\n        Follow.follower_id == current_user.id,\n        Follow.followee_id == followee_id\n    ).first()\n    if not follow:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Follow relationship not found\")\n    db.delete(follow)\n    db.commit()\n    return {\"message\":\"Successfully unfollowed\"}",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "get_user_profile",
        "kind": 2,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "def get_user_profile(user_id: int, db: Session = Depends(get_db)):\n    user = db.query(models.User).filter(models.User.id == user_id).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"User not found\")\n    followers_count = db.query(Follow).filter(Follow.followee_id == user_id).count()\n    following_count = db.query(Follow).filter(Follow.follower_id == user_id).count()\n    return {\n        \"id\": user.id,\n        \"email\": user.email,\n        \"followers_count\": followers_count,",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "forget_password",
        "kind": 2,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "def forget_password(user_email: str, db: Session = Depends(get_db)):\n    # Check if user exists\n    user = db.query(models.User).filter(models.User.email == user_email).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Email not registered\")\n    # Generate reset token and expiry time\n    reset_token = secrets.token_hex(32)  # Secure random token\n    token_expiry = datetime.utcnow() + timedelta(minutes=30)  # Token valid for 30 minutes\n    # Update user with reset token and expiry\n    user.reset_token = reset_token",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "reset_password",
        "kind": 2,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "def reset_password(token: str, new_password: str, db: Session = Depends(get_db)):\n    # Validate the token\n    user = db.query(models.User).filter(models.User.reset_token == token).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid or expired token\")\n    # Check if the token is expired\n    if user.reset_token_expiry < datetime.utcnow():\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Token has expired\")\n    # Hash the new password\n    hashed_password = utils.hash(new_password)",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/users\",\n    tags=['Users']\n)\n# Creating user\n@router.post(\"/\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserResponse)\ndef create_user(user: schemas.CreateUser, db:Session = Depends(get_db)): \n    # hash the password - user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Settings(BaseSettings):\n    database_hostname: str\n    database_port: str\n    database_password: str\n    database_name: str\n    database_username: str\n    secret_key: str\n    algorithm: str\n    access_token_expire_minutes: int\n    email_user: str",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "settings = Settings()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# uncomment this when u want to per raw sql operation for using orm the above is right e sqlalchemy\n'''\nwhile True:\n    try:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# uncomment this when u want to per raw sql operation for using orm the above is right e sqlalchemy",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "Base = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# uncomment this when u want to per raw sql operation for using orm the above is right e sqlalchemy\n'''",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# origins = [\"https://www.google.com\",\"https://www.youtube.com\"]        #to allow only tour specifies origins or to rpvide strict origins\norigins = [\"*\"]     #to all laow alltypes of frotn end origin who can access your bacjened  or all domains\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,   \n    allow_credentials=True,\n    allow_methods=[\"*\"],        #this line means which tyoe i method i can alow that what t ype of requests poeole can do e.g post or get or wthey will be allowed to do delete or update\n    allow_headers=[\"*\"],        \n)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "origins = [\"*\"]     #to all laow alltypes of frotn end origin who can access your bacjened  or all domains\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,   \n    allow_credentials=True,\n    allow_methods=[\"*\"],        #this line means which tyoe i method i can alow that what t ype of requests poeole can do e.g post or get or wthey will be allowed to do delete or update\n    allow_headers=[\"*\"],        \n)\n# this three lines show the path appication ==>  Api Router\napp.include_router(post.router)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Post(Base):\n    __tablename__ = \"posts\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    title = Column(String, nullable=False)\n    content = Column(String, nullable=False)\n    published = Column(Boolean, server_default='True', nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True),nullable=False, server_default=text('now()'))\n    owner_id = Column(Integer, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), nullable=False)\n    image_url = Column(String, nullable=True)  # Optional image URL field\n    owner = relationship(\"User\")",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    email = Column(String, nullable=False, unique=True)\n    password = Column(String, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True),\n                        nullable=False, server_default=text('now()'))\n    #  fields for the forget/reset password functionality\n    reset_token = Column(String, nullable=True)  # To store the reset token\n    reset_token_expiry = Column(DateTime, nullable=True)  # To store token expiry",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Follow",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Follow(Base):\n    __tablename__ ='follows'\n    id = Column(Integer,primary_key=True,nullable=False)\n    follower_id = Column(Integer,ForeignKey(\"users.id\",ondelete=\"CASCADE\"),nullable=False)\n    followee_id = Column(Integer,ForeignKey(\"users.id\", ondelete=\"CASCADE\"),nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True),nullable=False,server_default=text('now()'))\n    follower = relationship(\"User\", foreign_keys=[follower_id])\n    followee = relationship(\"User\", foreign_keys=[followee_id])\nclass Like(Base):  # like = vote\n    __tablename__ = \"likes\"",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Like",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Like(Base):  # like = vote\n    __tablename__ = \"likes\"\n    user_id = Column(Integer, ForeignKey(\n        \"users.id\", ondelete=\"CASCADE\"), primary_key=True)\n    post_id = Column(Integer, ForeignKey(\n        \"posts.id\", ondelete=\"CASCADE\"), primary_key=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "def create_access_token(data:dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt = jwt.encode(to_encode,SECRET_KEY,ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token:str,credentials_exception):\n     # **CHECK IF TOKEN IS BLACKLISTED**\n    if token in TOKEN_BLACKLIST:\n        raise credentials_exception",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "verify_access_token",
        "kind": 2,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "def verify_access_token(token:str,credentials_exception):\n     # **CHECK IF TOKEN IS BLACKLISTED**\n    if token in TOKEN_BLACKLIST:\n        raise credentials_exception\n    try:\n        payload = jwt.decode(token,SECRET_KEY,algorithms=[ALGORITHM])\n        id: str = payload.get(\"user_id\")\n        if id is None:\n            raise credentials_exception\n        token_data = schemas.TokenData(id=str(id))",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(database.get_db)):\n    credentials_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                          detail = f\"You should login first\", \n                                          headers={\"WWW-Authenticate\":\"Bearer\"})\n    token = verify_access_token(token, credentials_exception)\n    user = db.query(models.User).filter(models.User.id == token.id).first()\n    return user",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "TOKEN_BLACKLIST",
        "kind": 5,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "TOKEN_BLACKLIST = set()\noauth2_scheme = OAuth2PasswordBearer(tokenUrl='login')      #oauth2_scheme is an instance of the class OAuth2PasswordBearer which is used to extract token \n#SECRET_KEY\n#Algorithm\n#Expiration\nSECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data:dict):\n    to_encode = data.copy()",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl='login')      #oauth2_scheme is an instance of the class OAuth2PasswordBearer which is used to extract token \n#SECRET_KEY\n#Algorithm\n#Expiration\nSECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data:dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "SECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data:dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt = jwt.encode(to_encode,SECRET_KEY,ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token:str,credentials_exception):",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "ALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data:dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt = jwt.encode(to_encode,SECRET_KEY,ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token:str,credentials_exception):\n     # **CHECK IF TOKEN IS BLACKLISTED**",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data:dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt = jwt.encode(to_encode,SECRET_KEY,ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token:str,credentials_exception):\n     # **CHECK IF TOKEN IS BLACKLISTED**\n    if token in TOKEN_BLACKLIST:",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PostBase(BaseModel):\n    title: str\n    content: str\n    published: bool =True \n# request type for user creation\nclass CreateUser(BaseModel):\n    email: EmailStr\n    password: str\n# Response on user creation \nclass UserResponse(BaseModel):",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateUser",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class CreateUser(BaseModel):\n    email: EmailStr\n    password: str\n# Response on user creation \nclass UserResponse(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class Config:\n        orm_mode = True\n# model for creating post how type data it should expct whne creating a post  \nclass CreatePost(PostBase):\n    image_url: Optional[str] = None \n# model for updating post how type data it should expct whne updating a post  ",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreatePost",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class CreatePost(PostBase):\n    image_url: Optional[str] = None \n# model for updating post how type data it should expct whne updating a post  \nclass UpdatePost(PostBase):\n    pass\n# what type of data it will giv ein repsonse\nclass PostResponse(PostBase):\n    id: int \n    created_at: datetime\n    owner_id: int       #this will show whime created the post",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UpdatePost",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UpdatePost(PostBase):\n    pass\n# what type of data it will giv ein repsonse\nclass PostResponse(PostBase):\n    id: int \n    created_at: datetime\n    owner_id: int       #this will show whime created the post\n    owner : UserResponse                                        #this line means that owner attribute is eaual to usreresponse which is actually reponse on user creation it will reutrn id,email and cratedat time\n    # As sqlachemy return an objects but pydantic can only work with dictionary so the bewlow two line wil make pydantic able to work with objet of orm/sqlalchemy \n    class Config:",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PostResponse(PostBase):\n    id: int \n    created_at: datetime\n    owner_id: int       #this will show whime created the post\n    owner : UserResponse                                        #this line means that owner attribute is eaual to usreresponse which is actually reponse on user creation it will reutrn id,email and cratedat time\n    # As sqlachemy return an objects but pydantic can only work with dictionary so the bewlow two line wil make pydantic able to work with objet of orm/sqlalchemy \n    class Config:\n        orm_mode = True\n            #model_config = ConfigDict(from_attributes=True)        #in pydantic version we have to write this intead of writng the above two lines\n# this response is for when i am getting all posts it will give these follwoing data",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PostWithLike",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PostWithLike(BaseModel):\n    post: PostResponse\n    likes:int\n    class Config:\n        orm_mode = True\n# request type for login\nclass UserLogin(BaseModel):\n    email: EmailStr\n    password: str \n# Response to login as it give a token in return Token in response",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: EmailStr\n    password: str \n# Response to login as it give a token in return Token in response\nclass Token(BaseModel):\n    access_token: str \n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None\n    # create_at: datetime",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str \n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None\n    # create_at: datetime\n#when we are going to make like what  type of data the like function should expect or what data we should send\nclass CreateLike(BaseModel):\n    post_id: int\n    dir: int = Field(..., ge=0, le=1)    #dir mean direcion as we can like or want to remove our like form post  so we will use dir= 1 for likeness and dir=0 for removing our like",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    id: Optional[str] = None\n    # create_at: datetime\n#when we are going to make like what  type of data the like function should expect or what data we should send\nclass CreateLike(BaseModel):\n    post_id: int\n    dir: int = Field(..., ge=0, le=1)    #dir mean direcion as we can like or want to remove our like form post  so we will use dir= 1 for likeness and dir=0 for removing our like\nclass FollowRequest(BaseModel):\n    followee_id: int\nclass FollowResponse(BaseModel):",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateLike",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class CreateLike(BaseModel):\n    post_id: int\n    dir: int = Field(..., ge=0, le=1)    #dir mean direcion as we can like or want to remove our like form post  so we will use dir= 1 for likeness and dir=0 for removing our like\nclass FollowRequest(BaseModel):\n    followee_id: int\nclass FollowResponse(BaseModel):\n    follower_id: int\n    followee_id: int\n    created_at: datetime\nclass UserProfile(BaseModel):",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "FollowRequest",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class FollowRequest(BaseModel):\n    followee_id: int\nclass FollowResponse(BaseModel):\n    follower_id: int\n    followee_id: int\n    created_at: datetime\nclass UserProfile(BaseModel):\n    id: int\n    email: str\n    followers_count: int",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "FollowResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class FollowResponse(BaseModel):\n    follower_id: int\n    followee_id: int\n    created_at: datetime\nclass UserProfile(BaseModel):\n    id: int\n    email: str\n    followers_count: int\n    following_count: int",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserProfile(BaseModel):\n    id: int\n    email: str\n    followers_count: int\n    following_count: int",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n# for all posts\ndef map_posts_to_response(posts_with_likes: List[Tuple[models.Post, int]]) -> List[schemas.PostWithLike]:\n    response = []\n    for post, likes in posts_with_likes:\n        response.append(\n            schemas.PostWithLike(",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n# for all posts\ndef map_posts_to_response(posts_with_likes: List[Tuple[models.Post, int]]) -> List[schemas.PostWithLike]:\n    response = []\n    for post, likes in posts_with_likes:\n        response.append(\n            schemas.PostWithLike(\n                post=schemas.PostResponse(\n                    id=post.id,",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "map_posts_to_response",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def map_posts_to_response(posts_with_likes: List[Tuple[models.Post, int]]) -> List[schemas.PostWithLike]:\n    response = []\n    for post, likes in posts_with_likes:\n        response.append(\n            schemas.PostWithLike(\n                post=schemas.PostResponse(\n                    id=post.id,\n                    title=post.title,\n                    content=post.content,\n                    published=post.published,",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "map_post_to_response",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def map_post_to_response(post: models.Post, likes: int) -> schemas.PostWithLike:\n    return schemas.PostWithLike(\n        post=schemas.PostResponse(\n            id=post.id,\n            title=post.title,\n            content=post.content,\n            published=post.published,\n            created_at=post.created_at,\n            owner_id=post.owner_id,\n            owner=schemas.UserResponse(",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def send_email(subject, body, recipient):\n    try:\n        # Create the email\n        email = EmailMessage()\n        email[\"From\"] = EMAIL_USER\n        email[\"To\"] = recipient\n        email[\"Subject\"] = subject\n        email.set_content(body)\n        # Connect to the Gmail SMTP server\n        smtp = smtplib.SMTP(\"smtp.gmail.com\", 587)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"],deprecated = \"auto\")\ndef hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n# for all posts\ndef map_posts_to_response(posts_with_likes: List[Tuple[models.Post, int]]) -> List[schemas.PostWithLike]:\n    response = []\n    for post, likes in posts_with_likes:\n        response.append(",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "EMAIL_USER",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "EMAIL_USER = os.getenv(\"EMAIL_USER\")\nEMAIL_PASSWORD = os.getenv(\"EMAIL_PASSWORD\")\ndef send_email(subject, body, recipient):\n    try:\n        # Create the email\n        email = EmailMessage()\n        email[\"From\"] = EMAIL_USER\n        email[\"To\"] = recipient\n        email[\"Subject\"] = subject\n        email.set_content(body)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "EMAIL_PASSWORD",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "EMAIL_PASSWORD = os.getenv(\"EMAIL_PASSWORD\")\ndef send_email(subject, body, recipient):\n    try:\n        # Create the email\n        email = EmailMessage()\n        email[\"From\"] = EMAIL_USER\n        email[\"To\"] = recipient\n        email[\"Subject\"] = subject\n        email.set_content(body)\n        # Connect to the Gmail SMTP server",
        "detail": "utils",
        "documentation": {}
    }
]